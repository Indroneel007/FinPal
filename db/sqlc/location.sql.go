// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: location.sql

package db

import (
	"context"
	"database/sql"
)

const createLocation = `-- name: CreateLocation :exec
INSERT INTO locations (username, address, latitude, longitude)
VALUES ($1, $2, $3, $4)
RETURNING id, username, address, latitude, longitude
`

type CreateLocationParams struct {
	Username  string          `json:"username"`
	Address   string          `json:"address"`
	Latitude  sql.NullFloat64 `json:"latitude"`
	Longitude sql.NullFloat64 `json:"longitude"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) error {
	_, err := q.db.ExecContext(ctx, createLocation,
		arg.Username,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}

const getLocationByUsername = `-- name: GetLocationByUsername :one
SELECT id, username, address, latitude, longitude FROM locations WHERE username = $1 LIMIT 1
`

func (q *Queries) GetLocationByUsername(ctx context.Context, username string) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByUsername, username)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const updateLocationByUsername = `-- name: UpdateLocationByUsername :exec
UPDATE locations
SET address = $2,
    latitude = $3,
    longitude = $4
WHERE username = $1
RETURNING id, username, address, latitude, longitude
`

type UpdateLocationByUsernameParams struct {
	Username  string          `json:"username"`
	Address   string          `json:"address"`
	Latitude  sql.NullFloat64 `json:"latitude"`
	Longitude sql.NullFloat64 `json:"longitude"`
}

func (q *Queries) UpdateLocationByUsername(ctx context.Context, arg UpdateLocationByUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateLocationByUsername,
		arg.Username,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}
