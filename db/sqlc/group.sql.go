// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: group.sql

package db

import (
	"context"
	"database/sql"
)

const acceptGroupInvitation = `-- name: AcceptGroupInvitation :one
UPDATE accounts
SET has_accepted = true
WHERE id = $1 AND group_id = $2
RETURNING id, owner, balance, currency, type, group_id, has_accepted, created_at
`

type AcceptGroupInvitationParams struct {
	ID      int64         `json:"id"`
	GroupID sql.NullInt64 `json:"group_id"`
}

func (q *Queries) AcceptGroupInvitation(ctx context.Context, arg AcceptGroupInvitationParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, acceptGroupInvitation, arg.ID, arg.GroupID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.Type,
		&i.GroupID,
		&i.HasAccepted,
		&i.CreatedAt,
	)
	return i, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
  group_name, currency, type
) VALUES (
  $1, $2, $3
)
RETURNING id, group_name, currency, type, created_at
`

type CreateGroupParams struct {
	GroupName string `json:"group_name"`
	Currency  string `json:"currency"`
	Type      string `json:"type"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.GroupName, arg.Currency, arg.Type)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Currency,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const deleteGroupMember = `-- name: DeleteGroupMember :exec
DELETE FROM accounts
WHERE id = $1 AND group_id = $2
`

type DeleteGroupMemberParams struct {
	ID      int64         `json:"id"`
	GroupID sql.NullInt64 `json:"group_id"`
}

func (q *Queries) DeleteGroupMember(ctx context.Context, arg DeleteGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMember, arg.ID, arg.GroupID)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, group_name, currency, type, created_at FROM groups
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Currency,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupMembers = `-- name: GetGroupMembers :many
SELECT a.id, a.owner, a.balance, a.currency, a.type, a.group_id, a.has_accepted, a.created_at FROM accounts a
JOIN groups g ON a.group_id = g.id
WHERE g.id = $1
ORDER BY a.id
LIMIT $2 OFFSET $3
`

type GetGroupMembersParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetGroupMembers(ctx context.Context, arg GetGroupMembersParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMembers, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.Type,
			&i.GroupID,
			&i.HasAccepted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT id, group_name, currency, type, created_at FROM groups
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.Currency,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsByUser = `-- name: ListGroupsByUser :many
SELECT g.id, g.group_name, g.currency, g.type, g.created_at FROM groups g
JOIN accounts a ON g.id = a.group_id
WHERE a.owner = $1
ORDER BY g.id
LIMIT $2 OFFSET $3
`

type ListGroupsByUserParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListGroupsByUser(ctx context.Context, arg ListGroupsByUserParams) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroupsByUser, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.Currency,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupName = `-- name: UpdateGroupName :one
UPDATE groups
SET group_name = $2
WHERE id = $1
RETURNING id, group_name, currency, type, created_at
`

type UpdateGroupNameParams struct {
	ID        int64  `json:"id"`
	GroupName string `json:"group_name"`
}

func (q *Queries) UpdateGroupName(ctx context.Context, arg UpdateGroupNameParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroupName, arg.ID, arg.GroupName)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Currency,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}
